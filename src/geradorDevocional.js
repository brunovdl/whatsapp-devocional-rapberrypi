// M√≥dulo gerador de devocionais com IA (Google Gemini) - Otimizado

const { GoogleGenerativeAI } = require('@google/generative-ai');
const leitorDocumentos = require('./leitorDocumentos');
const historicoMensagens = require('./historicoMensagens');
const verificadorFormato = require('./verificadorFormato');
const { logger } = require('./utils');

// Configura√ß√£o da API do Gemini
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const TEMPERATURA_BASE = parseFloat(process.env.TEMPERATURA_BASE || '0.7');
const MAX_TENTATIVAS = parseInt(process.env.MAX_TENTATIVAS || '3', 10);

// Inicializar o cliente Gemini
let genAI;
let geminiModel;
let modeloAtual = '';

// Modelos em ordem de prefer√™ncia
const MODELOS_GEMINI = [
  "gemini-2.0-flash",
  "gemini-1.5-pro",
  "gemini-pro"
];

// Fun√ß√£o para inicializar a API do Gemini
function inicializarGeminiAPI() {
  try {
    if (!GEMINI_API_KEY) {
      logger.error('Chave da API do Gemini n√£o configurada no arquivo .env');
      return false;
    }
    
    genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
    
    // Tentar cada modelo na ordem de prefer√™ncia
    for (const modelo of MODELOS_GEMINI) {
      try {
        geminiModel = genAI.getGenerativeModel({ model: modelo });
        modeloAtual = modelo;
        logger.info(`API do Google Gemini (${modelo}) inicializada com sucesso`);
        return true;
      } catch (erro) {
        logger.warn(`Erro ao inicializar modelo ${modelo}: ${erro.message}`);
        // Continua tentando o pr√≥ximo modelo
      }
    }
    
    logger.error('Todos os modelos Gemini falharam na inicializa√ß√£o');
    return false;
  } catch (erro) {
    logger.error(`Erro ao inicializar API do Gemini: ${erro.message}`);
    return false;
  }
}

// Tentar inicializar a API
inicializarGeminiAPI();

// Validar se o devocional gerado tem um vers√≠culo √∫nico
async function validarDevocionalGerado(devocional) {
  try {
    // Extrair o vers√≠culo do devocional
    const versiculo = historicoMensagens.extrairVersiculo(devocional);
    
    if (!versiculo || !versiculo.referencia) {
      logger.warn('N√£o foi poss√≠vel extrair vers√≠culo do devocional gerado');
      return false;
    }
    
    // Verificar se o vers√≠culo j√° foi usado recentemente
    const jaUsado = historicoMensagens.versiculoFoiUsadoRecentemente(versiculo.referencia, 30);
    
    if (jaUsado) {
      logger.warn(`Vers√≠culo ${versiculo.referencia} j√° foi usado recentemente, rejeitando o devocional`);
      return false;
    }
    
    logger.debug(`Vers√≠culo ${versiculo.referencia} √© √∫nico nos √∫ltimos 30 dias`);
    return true;
  } catch (erro) {
    logger.error(`Erro ao validar devocional: ${erro.message}`);
    return false;
  }
}

// Validar e corrigir o formato do devocional gerado
async function validarFormatoDevocional(devocional) {
  // Verificar se o devocional tem o formato esperado
  const { valido, mensagem } = verificadorFormato.verificarFormatoDevocional(devocional);
  
  if (!valido) {
    logger.warn(`Problema com formato do devocional: ${mensagem}`);
    
    // Tentar corrigir o formato
    const devocionalCorrigido = verificadorFormato.corrigirFormatoDevocional(devocional);
    
    // Verificar se a corre√ß√£o foi bem-sucedida
    const resultadoCorrecao = verificadorFormato.verificarFormatoDevocional(devocionalCorrigido);
    
    if (resultadoCorrecao.valido) {
      logger.debug("Formato do devocional corrigido com sucesso");
      return devocionalCorrigido;
    } else {
      logger.warn("N√£o foi poss√≠vel corrigir completamente o formato do devocional");
      // Mesmo que n√£o pudemos corrigir completamente, retornar a vers√£o que tentamos corrigir
      return devocionalCorrigido;
    }
  }
  
  // Se j√° estava no formato correto, retornar sem altera√ß√µes
  return devocional;
}

// Gerar um prompt para o Gemini
async function gerarPrompt(dataAtual) {
  try {
    // Obter conte√∫do da base de conhecimento
    const baseConhecimento = await leitorDocumentos.obterConteudoBase();
    
    // Obter vers√≠culos recentes (para evitar repeti√ß√µes)
    const versiculosRecentes = historicoMensagens.obterVersiculosRecentes(30);
    const versiculosRecentesTexto = versiculosRecentes
      .map(v => {
        if (!v || !v.referencia || !v.texto) return '';
        return `${v.referencia}: "${v.texto}"`;
      })
      .filter(v => v) // Remove entradas vazias
      .join('\n');
    
    // Adicionar log para debug
    logger.debug(`${versiculosRecentes.length} vers√≠culos a serem evitados`);
    
    // Construir o prompt
    const prompt = `
      Voc√™ √© um bot de WhatsApp com intelig√™ncia artificial projetado para enviar um devocional di√°rio todas as manh√£s.
      
      Seu objetivo √© criar uma mensagem devocional que contenha:
      1. A data atual (${dataAtual})
      2. Um vers√≠culo b√≠blico relevante
      3. Um t√≠tulo para o devocional
      4. Um texto explicativo sobre o vers√≠culo (3-5 frases)
      5. Uma sugest√£o pr√°tica para o dia (1-2 frases)
      6. Uma pergunta ou convite ao di√°logo ao final que incentive o usu√°rio a responder
      
      O tom deve ser caloroso, pessoal e conversacional, como se voc√™ estivesse falando diretamente com o usu√°rio.
      Use frases que incentivem a intera√ß√£o como "O que voc√™ acha disso?", "Como isso ressoa com voc√™ hoje?", 
      ou "Gostaria de compartilhar como este vers√≠culo fala √† sua vida?".
      
      MUITO IMPORTANTE: Voc√™ deve gerar um devocional com um vers√≠culo diferente a cada dia. Nunca repita vers√≠culos que j√° foram usados recentemente.
      
      Baseie-se no seguinte conte√∫do para selecionar o vers√≠culo e elaborar a reflex√£o:
      
      ${baseConhecimento.substring(0, 15000)} 
      
      Evite usar ABSOLUTAMENTE os seguintes vers√≠culos que foram utilizados recentemente:
      ${versiculosRecentesTexto || "Nenhum vers√≠culo recente a evitar."}
      
      Exemplo do formato esperado:
      
      "üìÖ ${dataAtual}

      *Tudo o que fizer fa√ßa com amor*
      
      üìñ *Vers√≠culo:* \"Tudo o que fizerem, fa√ßam de todo o cora√ß√£o, como para o Senhor.\" (Colossenses 3:23)
      
      üí≠ *Reflex√£o:* Este vers√≠culo nos lembra que nossas a√ß√µes di√°rias, por menores que sejam, ganham significado quando as dedicamos a Deus. Trabalhar, ajudar algu√©m ou at√© descansar pode ser uma forma de honr√°-Lo se fizermos com amor e prop√≥sito. Que tal come√ßar o dia com essa inten√ß√£o no cora√ß√£o?
      
      üßóüèº *Pr√°tica:* Hoje, escolha uma tarefa simples e a realize com dedica√ß√£o, pensando em como ela pode refletir seu cuidado com os outros e com Deus.
      
      ü§î *E voc√™?* H√° alguma √°rea da sua vida onde voc√™ gostaria de trazer mais prop√≥sito e dedica√ß√£o? Ficarei feliz em conversar sobre isso."
      
      Gere o devocional seguindo exatamente esse formato.
    `;
    
    return prompt.trim();
  } catch (erro) {
    logger.error(`Erro ao gerar prompt: ${erro.message}`);
    throw erro;
  }
}

// Gerar o devocional utilizando o Gemini com valida√ß√£o de vers√≠culo √∫nico
async function gerarDevocional(dataAtual) {
  try {
    // Verificar se a API foi inicializada corretamente
    if (!geminiModel) {
      logger.warn('API do Gemini n√£o inicializada. Tentando inicializar novamente...');
      
      // Tentar inicializar novamente
      const inicializou = inicializarGeminiAPI();
      
      if (!inicializou || !geminiModel) {
        throw new Error('Falha ao inicializar API do Gemini. Verifique a chave de API.');
      }
    }
    
    // Contador de tentativas para evitar loop infinito
    let tentativas = 0;
    let devocionalValido = false;
    let devocional = '';
    
    while (!devocionalValido && tentativas < MAX_TENTATIVAS) {
      tentativas++;
      logger.info(`Gerando devocional - tentativa ${tentativas}/${MAX_TENTATIVAS}`);
      
      // Gerar o prompt com os vers√≠culos a serem evitados
      const prompt = await gerarPrompt(dataAtual);
      
      try {
        const result = await geminiModel.generateContent({
          contents: [{ role: "user", parts: [{ text: prompt }] }],
          generationConfig: {
            temperature: TEMPERATURA_BASE + (tentativas * 0.1), // Aumentar a temperatura a cada tentativa
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 1024,
          },
        });
        
        const response = result.response;
        devocional = response.text().trim();

        // Validar e corrigir o formato do devocional
        devocional = await validarFormatoDevocional(devocional);
        
        // Verificar se o devocional foi gerado corretamente
        if (!devocional || devocional.length < 50) {
          logger.warn('Devocional gerado muito curto ou vazio. Tentando novamente.');
          continue;
        }
        
        // Validar se o vers√≠culo n√£o foi usado recentemente
        devocionalValido = await validarDevocionalGerado(devocional);
        
        if (devocionalValido) {
          logger.info('Devocional v√°lido gerado com sucesso');
          return devocional;
        } else {
          logger.warn('Devocional gerado usa vers√≠culo repetido ou inv√°lido. Tentando novamente.');
        }
      } catch (erroGemini) {
        logger.warn(`Erro com o modelo na tentativa ${tentativas}: ${erroGemini.message}`);
        
        if (tentativas >= MAX_TENTATIVAS) {
          logger.error('N√∫mero m√°ximo de tentativas atingido. Usando fallback.');
          return gerarDevocionalFallback(dataAtual);
        }
      }
    }
    
    // Se chegou aqui sem um devocional v√°lido, usar fallback
    if (!devocionalValido) {
      logger.warn('N√£o foi poss√≠vel gerar um devocional com vers√≠culo √∫nico. Usando fallback.');
      return gerarDevocionalFallback(dataAtual);
    }
    
    return devocional;
  } catch (erro) {
    logger.error(`Erro ao gerar devocional: ${erro.message}`);
    return gerarDevocionalFallback(dataAtual);
  }
}

// Gerar um devocional de fallback em caso de erro na API
function gerarDevocionalFallback(dataAtual) {
  logger.info('Gerando devocional de fallback...');
  
  // Lista de devocionais de fallback com vers√≠culos diferentes
  const devocionaisFallback = [
    {
      versiculo: "N√£o temas, porque eu sou contigo; n√£o te assombres, porque eu sou teu Deus; eu te fortale√ßo, e te ajudo, e te sustento com a destra da minha justi√ßa.",
      referencia: "Isa√≠as 41:10",
      reflexao: "Mesmo quando enfrentamos dificuldades ou desafios inesperados, Deus est√° ao nosso lado, pronto para nos dar for√ßa e sustento. Este vers√≠culo nos lembra que n√£o precisamos temer, pois temos a presen√ßa constante do Senhor em nossas vidas, guiando nossos passos e iluminando nosso caminho.",
      pratica: "Hoje, ao enfrentar qualquer situa√ß√£o desafiadora, fa√ßa uma pausa, respire e relembre esta promessa de sustento divino antes de prosseguir."
    },
    {
      versiculo: "Tudo posso naquele que me fortalece.",
      referencia: "Filipenses 4:13",
      reflexao: "Este vers√≠culo nos lembra que nossa for√ßa vem de Deus. Quando enfrentamos desafios que parecem al√©m das nossas capacidades, n√£o estamos sozinhos. Com o poder de Cristo, podemos superar obst√°culos que sozinhos seriam imposs√≠veis. Esta n√£o √© uma promessa de sucesso em tudo, mas de for√ßa para perseverar em todas as circunst√¢ncias.",
      pratica: "Identifique um desafio atual em sua vida e entregue-o em ora√ß√£o, reconhecendo sua depend√™ncia da for√ßa divina para super√°-lo."
    },
    {
      versiculo: "O Senhor √© meu pastor; nada me faltar√°.",
      referencia: "Salmos 23:1",
      reflexao: "Neste belo salmo, Davi compara o cuidado de Deus ao de um pastor dedicado que supre todas as necessidades de suas ovelhas. Quando confiamos em Deus como nosso pastor, podemos descansar na certeza de que Ele conhece nossas necessidades e cuida de n√≥s com amor e sabedoria, mesmo nos momentos mais dif√≠ceis.",
      pratica: "Reserve um momento hoje para listar suas necessidades e agradecer a Deus pelo cuidado que Ele j√° est√° providenciando em cada √°rea."
    }
  ];
  
  // Escolher um devocional aleat√≥rio da lista
  const fallback = devocionaisFallback[Math.floor(Math.random() * devocionaisFallback.length)];
  
  // Formatar o devocional no padr√£o esperado
  return `üìÖ ${dataAtual}

üìñ *Vers√≠culo:* "${fallback.versiculo}" (${fallback.referencia})

üí≠ *Reflex√£o:* ${fallback.reflexao}

üßóüèª *Pr√°tica:* ${fallback.pratica}`;
}

module.exports = {
  gerarDevocional,
  validarDevocionalGerado,
  validarFormatoDevocional,
  inicializarGeminiAPI
};